//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.07.15 at 01:56:41 AM IDT 
//


package engine.rse;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import java.io.InputStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;all>
 *         &lt;element ref="{}rse-stocks"/>
 *         &lt;element ref="{}rse-holdings"/>
 *       &lt;/all>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {

})
@XmlRootElement(name = "rizpa-stock-exchange-descriptor")
public class RizpaStockExchangeDescriptor {

    @XmlElement(name = "rse-stocks", required = true)
    protected RseStocks rseStocks;
    @XmlElement(name = "rse-holdings", required = true)
    protected RseHoldings rseHoldings;

    private RseUsers rseUsers;
    
    public RseUsers getRseUsers() {
        if(rseUsers == null)
            rseUsers = new RseUsers();
        return rseUsers;
    }

    public RizpaStockExchangeDescriptor(RseStocks rseStocks, RseUsers rseUsers) {
        this.rseStocks = rseStocks;
        this.rseUsers = rseUsers;
    }

    public RizpaStockExchangeDescriptor() {
    }

    public void setRseUsers(RseUsers rseUsers) {
        this.rseUsers = rseUsers;
    }


    /**
     * Gets the value of the rseStocks property.
     *
     * @return possible object is
     * {@link RseStocks }
     */
    public RseStocks getRseStocks() {
        return rseStocks;
    }

    /**
     * Sets the value of the rseStocks property.
     *
     * @param value allowed object is
     *              {@link RseStocks }
     */
    public void setRseStocks(RseStocks value) {
        this.rseStocks = value;
    }

    /**
     * Gets the value of the rseHoldings property.
     *
     * @return possible object is
     * {@link RseHoldings }
     */
    public RseHoldings getRseHoldings() {
        return rseHoldings;
    }

    /**
     * Sets the value of the rseHoldings property.
     *
     * @param value allowed object is
     *              {@link RseHoldings }
     */
    public void setRseHoldings(RseHoldings value) {
        this.rseHoldings = value;
    }


    public String checkRSED() {
        List<RseStock> stockList = new ArrayList<RseStock>();

        //check stocks
        for (RseStock r : rseStocks.getRseStock()) {
            for (RseStock s : stockList) {
                if (r.getRseSymbol().equalsIgnoreCase(s.getRseSymbol()))
                    return "2 or more companies have same symbol";
                if (r.getRseCompanyName().equalsIgnoreCase(s.getRseCompanyName()))
                    return "company appears on 2 or more stocks";
            }
            stockList.add(r);
        }
        RseStock stock;
        boolean flg;
        for (RseItem holding : getRseHoldings().getRseItem()) {
            flg = false;
            for (RseStock s : stockList) {
                if (holding.getSymbol().equalsIgnoreCase(s.getRseSymbol()))
                    flg = true;
            }
            if (!flg)
                return "holding has no declaring company";
        }
        return null;
    }

    public String checkRSED(RizpaStockExchangeDescriptor d) {
        boolean isSymbolSame,isNameSame;
        //check stocks
        for (RseStock r : rseStocks.getRseStock()) {
            for (RseStock s : d.rseStocks.getRseStock()) {
                isNameSame = r.getRseCompanyName().equalsIgnoreCase(s.getRseCompanyName());
                isSymbolSame = r.getRseSymbol().equalsIgnoreCase(s.getRseSymbol());
                if (!isNameSame && isSymbolSame)
                    return "2 or more companies have same symbol but different names";
                if (isNameSame && !isSymbolSame)
                    return "company name appears on 2 or more stocks with different symbols";
            }
        }
        return null;
    }

    public void deserializeFrom(StringReader in) throws JAXBException {
        JAXBContext jc = JAXBContext.newInstance("engine.rse");
        Unmarshaller u = jc.createUnmarshaller();
        RizpaStockExchangeDescriptor r = ((RizpaStockExchangeDescriptor) u.unmarshal(in));
        this.rseStocks = r.rseStocks;
        this.rseHoldings = r.rseHoldings;

    }

    public RseStock findStock(String str) {
        for (RseStock r : getRseStocks().getRseStock()) {
            if (r.getRseSymbol().equalsIgnoreCase(str)) {
                return r;
            }
        }
        return null;
    }

    public void addToRSEDescriptor(RizpaStockExchangeDescriptor descriptor,String userName) {
        for (RseStock s : descriptor.rseStocks.getRseStock()) {
            if (findStock(s.getRseSymbol()) == null) {
                this.rseStocks
                        .getRseStock()
                        .add(new RseStock(s.getRseSymbol(),
                                s.getRseCompanyName(),
                                s.getRsePrice()));
            }
        }

        RseUser user = rseUsers.getUser(userName);
        for (RseItem dItem:descriptor.getRseHoldings().getRseItem()) {
            for (RseItem uItem : user.getRseHoldings().getRseItem()) {
                if (uItem.getSymbol().equalsIgnoreCase(dItem.getSymbol())){
                    uItem.setQuantity(uItem.getQuantity() + dItem.getQuantity());
                    dItem.setQuantity(0);
                }
            }
            if(dItem.getQuantity() != 0)
                user.getRseHoldings()
                    .getRseItem()
                    .add(new RseItem(dItem.getSymbol(),
                            dItem.getQuantity()));
        }
    }
}