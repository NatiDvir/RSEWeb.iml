//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.07.15 at 01:56:41 AM IDT 
//


package engine.rse;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import java.util.ArrayList;
import java.util.List;


/**
 * <p>Java class for anonymous complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;all>
 *         &lt;element ref="{}rse-symbol"/>
 *         &lt;element ref="{}rse-company-name"/>
 *         &lt;element ref="{}rse-price"/>
 *       &lt;/all>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {

})
@XmlRootElement(name = "rse-stock")
public class RseStock {

    @XmlElement(name = "rse-symbol", required = true)
    protected String rseSymbol;
    @XmlElement(name = "rse-company-name", required = true)
    protected String rseCompanyName;
    @XmlElement(name = "rse-price")
    protected int rsePrice;
    protected long rseCycle = 0;
    protected RseOffers sellOffers = new RseOffers();
    protected RseOffers buyOffers = new RseOffers();
    protected RseOffers dealsMade = new RseOffers();


    public RseStock() {
    }

    public RseStock(String rseSymbol, String rseCompanyName, int rsePrice) {
        this.rseSymbol = rseSymbol;
        this.rseCompanyName = rseCompanyName;
        this.rsePrice = rsePrice;
    }
    public RseStock(String rseSymbol, String rseCompanyName, int rsePrice,Long rseCycle) {
        this.rseSymbol = rseSymbol;
        this.rseCompanyName = rseCompanyName;
        this.rsePrice = rsePrice;
        this.rseCycle = rseCycle;
    }

    public long getRseCycle() {
        return rseCycle;
    }

    public RseOffers getBuyOffers() {
        return buyOffers;
    }

    public RseOffers getDealsMade() {
        return dealsMade;
    }

    public void setDealsMade(RseOffers dealsMade) {
        this.dealsMade = dealsMade;
    }

    public RseOffers getSellOffers() {
        return sellOffers;
    }

    /**
     * Gets the value of the rseSymbol property.
     *
     * @return possible object is
     * {@link String }
     */
    public String getRseSymbol() {
        return rseSymbol;
    }

    /**
     * Sets the value of the rseSymbol property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setRseSymbol(String value) {
        this.rseSymbol = value;
    }

    /**
     * Gets the value of the rseCompanyName property.
     *
     * @return possible object is
     * {@link String }
     */
    public String getRseCompanyName() {
        return rseCompanyName;
    }

    /**
     * Sets the value of the rseCompanyName property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setRseCompanyName(String value) {
        this.rseCompanyName = value;
    }

    /**
     * Gets the value of the rsePrice property.
     */
    public int getRsePrice() {
        return rsePrice;
    }

    /**
     * Sets the value of the rsePrice property.
     */
    public void setRsePrice(int value) {
        this.rsePrice = value;
    }

    @Override
    public String toString() {
        return "Symbol = '" + rseSymbol + '\'' +
                ", Name = '" + rseCompanyName + '\'' +
                ", Price = " + rsePrice;
    }

    public synchronized List<String> addOffer(int action, RseOffer offer) {
        List<String> res = new ArrayList<>();

        if (action == RseOffer.BUY) {
            res = makeSale(offer,
                    false,
                    sellOffers.getRseOffer(),
                    buyOffers.getRseOffer(),
                    "Added to Buy Offers");
        } else if (action == RseOffer.SELL) {
            res = makeSale(offer,
                    true,
                    buyOffers.getRseOffer(),
                    sellOffers.getRseOffer(),
                    "Added to Sell Offers");
        }

        buyOffers.getRseOffer().sort((o1, o2) -> {
            if (!o1.getPrice().equals(o2.getPrice()))
                return o2.getPrice().compareTo(o1.getPrice());
            if (!o1.getAmount().equals(o2.getAmount()))
                return o2.getAmount().compareTo(o1.getAmount());
            return o1.getDateOfDeal().compareTo(o2.getDateOfDeal());
        });
        sellOffers.getRseOffer().sort((o1, o2) -> {
            if (!o1.getPrice().equals(o2.getPrice()))
                return o1.getPrice().compareTo(o2.getPrice());
            if (!o1.getAmount().equals(o2.getAmount()))
                return o2.getAmount().compareTo(o1.getAmount());
            return o1.getDateOfDeal().compareTo(o2.getDateOfDeal());
        });

        rseCycle = 0;
        for (RseOffer o: dealsMade.getRseOffer()) {
            rseCycle += (long) o.amount * o.price;
        }
        return res;
    }

    private List<String> makeSale(RseOffer offer,
                                  boolean isSell,
                                  List<RseOffer> rseOfferList,
                                  List<RseOffer> addToList,
                                  String lstStr) {

        List<String> res = new ArrayList<>();
        List<RseOffer> toBeDeleted = new ArrayList<>();
        List<RseOffer> toBeMade = new ArrayList<>();

        int newPrice = -1;
        int amount = 0;
        res.add("Deal Made: ");
        for (RseOffer rseOffer : rseOfferList) {
            if ((offer.getPrice() == RseOffer.MKT_CODE)//MKT
                    || ((offer.getPrice() >= rseOffer.getPrice()) && !isSell)//buy
                    || ((offer.getPrice() <= rseOffer.getPrice()) && isSell)) //sell
            {
                if (newPrice < rseOffer.getPrice())
                    rsePrice = newPrice = rseOffer.getPrice();

                if (offer.getAmount().compareTo(rseOffer.getAmount()) >= 0) {
                    offer.setAmount(offer.getAmount() - rseOffer.getAmount());
                    amount = rseOffer.getAmount();
                    //marked for deletion
                    toBeDeleted.add(rseOffer);
                } else {
                    rseOffer.setAmount(rseOffer.getAmount() - offer.getAmount());
                    amount = offer.getAmount();
                    offer.setAmount(0);
                }

                //commit to trade
                toBeMade.add(
                        new RseOffer(
                                offer.getUser()
                                , rseOffer.getUser()
                                , offer.getDateOfDeal()
                                , amount
                                , rsePrice
                                , rseOffer.getOfferType()
                                , !isSell
                        )
                );
                if (offer.getAmount() == 0) {
                    List<String> tmp = commitAllOffers(toBeMade);
                    if (tmp != null)
                        res.addAll(tmp);
                    rseOfferList.removeAll(toBeDeleted);
                    return res;
                }
            }
        }

        if (offer.getOfferType() == RseOffer.FOK) {
            res = new ArrayList<>();
            res.add("No action has been taken.");
            return res;
        }

        List<String> tmp = commitAllOffers(toBeMade);
        if (tmp != null)
            res.addAll(tmp);
        //delete all irrelevant offerings
        rseOfferList.removeAll(toBeDeleted);

        //check if any deals made
        if (res.size() == 1)
            res = new ArrayList<>();

        //check IOC if not add to relevant offering list
        if (offer.getOfferType() != RseOffer.IOC) {
            if (offer.getPrice() == -1)
                offer = new RseOffer(offer.getUser()
                        , null
                        , offer.getDateOfDeal()
                        , offer.getAmount()
                        , rsePrice
                        , offer.getOfferType()
                        , offer.isSell
                );
            addToList.add(offer);

            res.add(lstStr);
            res.add(offer.toString());
        } else {
            if (res.isEmpty()) {
                res.add("No action has been taken.");
            }
        }
        return res;
    }

    private RseOffer addToDealsMade(RseUser user, RseUser user2, String date, int amount, int price, int offerType) {
        RseOffer rseOffer = new RseOffer(user, user2, date, amount, price, offerType, false);
        dealsMade.addRseOffer(rseOffer);
        return rseOffer;

    }

    private List<String> commitAllOffers(List<RseOffer> oLst) {
        List<String> res = new ArrayList<>();

        for (RseOffer o : oLst) {

            o.getUser()
                    .offerAccepted(rseSymbol
                            , o.getAmount()
                            , (o.isSell ? RseOffer.BUY : RseOffer.SELL)
                            , rsePrice
                            , o.getDateOfDeal()
                    );

            o.getSecondUser()
                    .offerAccepted(rseSymbol
                            , o.getAmount()
                            , (o.isSell ? RseOffer.SELL : RseOffer.BUY)
                            , rsePrice
                            , o.getDateOfDeal()
                    );

            res.add(
                    addToDealsMade(o.getSecondUser()
                            , o.getUser()
                            , o.getDateOfDeal()
                            , o.getAmount()
                            , o.getPrice()
                            , o.getOfferType()
                    ).toString()
            );
        }

        return res.isEmpty() ? null : res;
    }

}
